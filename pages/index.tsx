import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { useCallback, useState } from 'react'

const Home: NextPage = () => {
  const [pageId, setPageId] = useState<string>('1')

  const onChange = useCallback((e: any) => {
    // @ts-ignore
    setPageId(e.target.value)
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div>
        <div>
          <p>Page ID</p>
          <input value={pageId} onChange={onChange} required />
        </div>
        <div style={pageId ? {} : { pointerEvents: 'none', opacity: 0.3 }}>
          <h2>Server Site Rendered</h2>
          <p>
            Server Side Render will run on every page navigation, for every user, but as we can set a cache on response,
            a user can get a 304(NOT CHANGED) response from server when opening a still cached content.
          </p>
          <p>
            But even if a user open a content, and right after that another user tries to open the same URL, it won`t be
            cached for the second user, as this cache is per browser
          </p>
          <p>
            CONS: Everyone will have a delay on first time opening an URL (even Google); SSR response isn`t reused for
            differtn users
          </p>
          <ul>
            <li>
              <Link href={`/ssr/not-cached/${pageId}`} prefetch={false}>
                <a>Without Cache: {`/ssr/not-cached/${pageId}`}</a>
              </Link>
            </li>
            <li>
              <Link href={`/ssr/cached/${pageId}`} prefetch={false}>
                <a>With Cache 10sec: {`/ssr/cached/${pageId}`}</a>
              </Link>
            </li>
            <li>
              <Link href={`/ssr/cached/not-stale/${pageId}`} prefetch={false}>
                <a>With Cache 10sec (not stale): {`/ssr/cached/not-stale/${pageId}`}</a>
              </Link>
            </li>
          </ul>
          <hr />
          <h2>Static Site Generated</h2>
          <p>Static Site Genaretion takes place on build and when someone opens one url for the first time.</p>
          <p>
            So when a user hits one URL we can decide to return empty props while fetching that data on Background, or
            block the user just like it happens for SSR.
          </p>
          <p>
            After caching the result for a page, everyone hitting the same URL will receive the cached data, and when
            someone hits one outdated cache, it will be revalidated for the next attempt on that URL
          </p>
          <p>CONS: NextJS will always run prefetch when hovering urls, which will trigger a lot of lambda calls;</p>
          <ul>
            <li>
              <Link href={`/ssg/fallback/${pageId}`} prefetch={false}>
                <a>With Fallback: {`/ssg/fallback/${pageId}`}</a>
              </Link>
            </li>
            <li>
              <Link href={`/ssg/not-fallback/${pageId}`} prefetch={false}>
                <a>Without Fallback: {`/ssg/not-fallback/${pageId}`}</a>
              </Link>
            </li>
            <li>
              <Link href={`/ssg/blocking/${pageId}`} prefetch={false}>
                <a>With Blocking: {`/ssg/blocking/${pageId}`}</a>
              </Link>
            </li>
          </ul>
        </div>
      </div>
    </>
  )
}

export default Home
